library(devtools)
build("G3proj")
load_all()
build("G3proj")
list.files("G3proj")
document()
build("G3proj")
document()
G3proj::soft_thresh(rnorm(10),1)
build("G3proj")
help(build)
build(pkg = "G3proj")
build()
document()
document()
document()
document()
build()
load_all()
setwd("~/GitHub/BIOS735-Group3")
load("train.Rda")
help(glmlasso)
codument()
document()
setwd("D:/UNC/735/G3proj")
document()
help(glmlasso)
head(train)
dim(train)
sf1 = glmlasso(train[,-94],train[,94],lambda = 0.1)
sf1 = glmlasso(as.matrix(train[,-94]),train[,94],lambda = 0.1)
sf1 = glmlasso(as.matrix(train[,1:5]),train[,94],lambda = 0.1)
sf1 = glmlasso(as.matrix(train[,1:2]),train[,94],lambda = 0.1)
sf1 = glmlasso(as.matrix(train[,1:2]),as.vector(train[,94]),lambda = 0.1)
train[,1:2]
sf1 = glmlasso(as.matrix(train[1:100,-94]),as.vector(train[1:100,94]),lambda = 0.1)
glm(train[,94]~0+as.matrix(train[1:100,-94]),family="binomial")
help(glm)
glm.fit(as.matrix(train[1:100,-94]),train[,94],family="binomial")
glm.fit(as.matrix(train[1:100,-94]),train[,94],family=binomial(link="logit"))
glm(x = as.matrix(train[1:100,-94]),y = train[,94],family="binomial")
glm(x = as.matrix(train[1:100,-94]),y = train[,94],family="binomial",formula = NULL)
glm.fit(as.matrix(train[1:100,-94]),train[,94],family=binomial())
glm.fit(as.matrix(train[1:100,-94]),as.numeric(train[,94]),family=binomial())
glm.fit(as.matrix(train[1:100,-94]),as.numeric(train[1:100,94]),family=binomial())
as.matrix(train[1:100,-94])
glm.fit(train[1:100,-94],as.numeric(train[1:100,94]),family=binomial())
train[1:100,-94]
glm.fit(train[1:100,-94],train[1:100,94],family=binomial())
class(train[,4])
class(train[,5])
class(train[,9])
train = apply(train,2,as.factor)
glm.fit(train[1:100,-94],train[1:100,94],family=binomial())
train = apply(train,2,as.numeric)
glm.fit(train[1:100,-94],train[1:100,94],family=binomial())
coef(glm.fit(train[1:100,-94],train[1:100,94],family=binomial()))
w = coef(glm.fit(train[1:100,-94],train[1:100,94],family=binomial()))
X=train[1:100,-94]
exp(X%*%w)/(1+exp(X%*%w))^2
summary(glm.fit(train[1:100,-94],train[1:100,94],family=binomial()))
glm.fit(train[1:100,-94],train[1:100,94],family=binomial())$coefficients
length(w)
document()
sf1 = glmlasso(train[1:100,-94],train[1:100,94],lambda = 0.1)
sf1
sf1 = glmlasso(train[,-94],train[,94],lambda = 0.1)
sf1
sf1 = glmlasso(train[1:100,-94],train[1:100,94],lambda = 0.2)
sf1
sf1 = glmlasso(train[1:100,-94],train[1:100,94],lambda = 0.002)
sf1
glmnet(train[1:100,-94],train[1:100,94],family="binomial",lambda = 0.02,intercept = FALSE)
library(glmnet)
g1 = glmnet(train[1:100,-94],train[1:100,94],family="binomial",lambda = 0.02,intercept = FALSE)
coef(g1,lambda = 0.02)
g1 = glmnet(train[1:100,-94],train[1:100,94],family="binomial",lambda = 0.002,intercept = FALSE)
coef(g1,lambda = 0.02)
cbind(g1,sf1)
cbind(coef(g1,lambda = 0.02),sf1)
dim(coef(g1,lambda = 0.02))
dim(sf1)
head(coef(g1,lambda = 0.02))
cbind(coef(g1,lambda = 0.02)[-1,],sf1)
cbind(coef(g1,lambda = 0.002)[-1,],sf1)
g1 = glmnet(train[1:100,-94],train[1:100,94],family="binomial",lambda = 0.002,intercept = FALSE)
cbind(coef(g1,lambda = 0.002)[-1,],sf1)
g1 = glmnet(train[1:1000,-94],train[1:1000,94],family="binomial",lambda = 0.002,intercept = FALSE)
sf1 = glmlasso(train[1:1000,-94],train[1:1000,94],lambda = 0.002)
cbind(coef(g1,lambda = 0.002)[-1,],sf1)
ts1 = cbind(coef(g1,lambda = 0.002)[-1,],sf1)
mean(ts1[,1]==0 & ts1[,2]==0)
sum(ts1[,1]==0 & ts1[,2]==0)
sum(ts1[,1]==0 & ts1[,2]!=0)
sum(ts1[,1]!=0 & ts1[,2]==0)
glm.fit(train[1:100,-94],train[1:100,94],family=binomial())$coefficients
glm(y~.+0,family="binomial",data = train)
glm(y~.+0,family="binomial",data = data.frame(train))
data.frame(train)
glm(Y~.+0,family="binomial",data = data.frame(train))
glm.fit(train[1:100,-94],train[1:100,94],family=binomial(link="logit"))$coefficients
#select lambda base on BIC.
optim.lambda <- function(Xz,yz,lambda.min,lambda.max,len){
lambda <- matrix(NA,1,len)
ww <- matrix(NA,ncol(Xz),len)
xb <- matrix(NA,length(yz),len)
pp <- matrix(NA,length(yz),len)
Devv <- matrix(NA,1,len)
k <- matrix(NA,1,len)
BIC <- matrix(NA,1,len)
for (i in 1:len) {
lambda[i] = lambda.min+i*(lambda.max-lambda.min)/len
ww[,i] <- glmlasso(Xz,yz,lambda =lambda[i])
xb[,i] = Xz%*%ww[,i]
pp[,i] = exp(xb[,i])/(1+exp(xb[,i]))
Devv[i] <- -2*(t(yz)%*%(xb[,i])+sum(log(1-pp[,i]))) #deviance for logistic regression
k[i] = sum(ww[,i]!=0) #df
BIC[i] = Devv[i] + k[i]*log(length(yz))
}
# Choose the minimum value
min_BIC = which(BIC == min(BIC))
# opt.lambda
return(lambda[min_BIC])
# plot of BIC v.s. lambda
plot(lambda, BIC,
xlim = c(lambda.min, lambda.max),
xlab = expression(lambda),
type = 'l', lwd = 2, lty = 1, col = 1)
abline(v=lambda[min_BIC], col = 2)
}
glm(train[1:100,-94],train[1:100,94],family=binomial(link="logit"))$coefficients
glm.fit(train[1:100,-94],train[1:100,94],family=binomial(link="logit"))$coefficients
glm.fit(train[,-94],train[,94],family=binomial(link="logit"))$coefficients
Xz = train[1:100,-94];yz = train[1:100,94]
optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.08,len = 200) #0.0475
sf1 = glmlasso(Xz,yz,lambda = 0.0716)
sf1
sf1 = glmlasso(Xz,yz,lambda = 0.0714)
sf1
sf1 = glmlasso(Xz,yz,lambda = 0.07)
sf1
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.07,intercept = FALSE)
coef(g1,s=0.07)
coef(g1,s=0.07)[73,]
predict.glmlasso <- function(fit, newdata, type="response", threshold = 0.5)
{
pred = exp(newdata %*% fit)/(1+exp(newdata %*% fit))
if(type == "class")
{
pred  = ifelse(pred > threshold,1,0)
}
return(pred)
}
predict.glmlasso(sf1,newdata = train[101:150,-94])
sf1
sf1 = glmlasso(Xz,yz,lambda = 0.002)
predict.glmlasso(sf1,newdata = train[101:150,-94])
predict.glmlasso(sf1,newdata = train[101:150,-94],type="class")
table(predict.glmlasso(sf1,newdata = train[101:150,-94],type="class"),train[101:150,94])
caret::ConfusionMatrix(table(predict.glmlasso(sf1,newdata = train[101:150,-94],type="class"),train[101:150,94]))
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[101:150,-94],type="class"),train[101:150,94]))
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.07,intercept = FALSE)
g1$df
sum(coef(g1,s=0.07)[,1]!=0)
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.007,intercept = FALSE)
g1$df
sum(coef(g1,s=0.007)[,1]!=0)
optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.05,len = 200) #0.0475
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.0455,intercept = FALSE)
sf1 = glmlasso(Xz,yz,lambda = 0.0455)
sf1
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.0455,intercept = FALSE)
ts1 = cbind(coef(g1,lambda = 0.0455)[-1,],sf1)
ts1
table(predict.glmlasso(sf1,newdata = train[101:150,-94],type="class"),train[101:150,94])
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[101:150,-94],type="class"),train[101:150,94]))
dim(train)
Xz = train[1:5000,-94];yz = train[1:5000,94]
optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.05,len = 200) #0.0475
w = coef(glm.fit(Xz,yz,family=binomial()))
w[is.na(w)]=1
w
document()
help(glmlasso)
Xz = train[1:500,-94];yz = train[1:500,94]
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.0455,intercept = FALSE)
sf1 = glmlasso(Xz,yz,lambda = 0.0455)
cbind(coef(g1,s=0.0455),sf1)
cbind(coef(g1,s=0.0455)[-1,],sf1)
sf1 = glmlasso(Xz,yz,lambda = 0.02)
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.02,intercept = FALSE)
cbind(coef(g1,s=0.02)[-1,],sf1)
glmlasso
document()
sf1 = glmlasso(Xz,yz,lambda = 0.02)
cbind(coef(g1,s=0.02)[-1,],sf1)
sf1 = glmlasso(Xz,yz,lambda = 0.01)
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.01,intercept = FALSE)
cbind(coef(g1,s=0.01)[-1,],sf1)
predict.glmlasso(sf1,newdata = train[6000:7000,-94],type="class")
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[6000:7000,-94],type="class"),train[6000:7000,94]))
help(confusionMatrix)
predict(g1,newx = train[5000:6000,-94])
predict(g1,newx = train[5000:6000,-94],type="class")
caret::confusionMatrix(table(predict(g1,newx = train[5000:6000,-94],type="class"),train[6000:7000,94]))
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[6000:7000,-94],type="class"),train[6000:7000,94]))
optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.04,len = 80) #0.0475
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.0215,intercept = FALSE)
sf1 = glmlasso(Xz,yz,lambda = 0.0215)
cbind(coef(g1,s=0.0215)[-1,],sf1)
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[6000:7000,-94],type="class"),train[6000:7000,94]))
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[6000:6500,-94],type="class"),train[6000:6500,94]))
caret::confusionMatrix(table(predict(g1,newx = train[5000:6000,-94],type="class"),train[6000:7000,94]))
Xz = train[,-94];yz = train[,94]
optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.035,len = 50) #0.0475
sf1 = glmlasso(Xz,yz,lambda = 0.0215)
sf1
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[6000:7000,-94],type="class"),train[6000:7000,94]))
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[100:500,-94],type="class"),train[100:500,94]))
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[,-94],type="class"),train[,94]))
sf1 = glmlasso(Xz,yz,lambda = 0.01)
g1 = glmnet(Xz,yz,lambda = 0.01,family="binomial",intercept = FALSE)
caret::confusionMatrix(table(predict(g1,type="class"),train[,94]))
caret::confusionMatrix(table(predict(g1,newx = train[,-94],type="class"),train[,94]))
load("test.Rda")
setwd("~/GitHub/BIOS735-Group3")
load("test.Rda")
head(test)
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = test[,-94],type="class"),test[,94]))
test <- apply(test,1,as.numeric)
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = test[,-94],type="class"),test[,94]))
head(test)
rm(test)
load("test.Rda")
head(test)
class*test$passangerPartner
class(test$passangerPartner)
test <- apply(test,2,as.numeric)
head(test)
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = test[,-94],type="class"),test[,94]))
caret::confusionMatrix(table(predict(g1,newx = test[,-94],type="class"),test[,94]))
library(pROC)
modr = roc(predict.glmlasso(sf1,newdata = test[,-94],type="class"),test[,94]))
modr = roc(predict.glmlasso(sf1,newdata = test[,-94],type="class"),test[,94])
plot(modr)
modr = roc(as.vector(predict.glmlasso(sf1,newdata = test[,-94],type="class")),test[,94])
plot(modr)
help(glmlasso)
plot(modr)
plot(modr,print.auc=TRUE,auc.polygon=TRUE,grid=c(0.1,0.2),grid.col=c("green","red"),max.auc.polygon=TRUE,auc.polygon.col="skyblue",#print.thres=TRUE,
main = "")
getwd()
setwd("D:/UNC/735/G3proj")
document()
rm(list = c("optim.lambda"))
document()
document()
document()
build()
load_all()
help(plot.roc)
