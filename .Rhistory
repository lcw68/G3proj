library(devtools)
install_github("lcw68/G3proj")
library(G3proj)
remove.packages("G3proj", lib="~/R/x86_64-pc-linux-gnu-library/4.0")
set.seed(1)
N  = 800
p  = 4
X  = matrix(data = rnorm(N*p), nrow=N, ncol=p)
beta_true = c(rep(1,p/2),rep(0,p/2))
eta = X %*% beta_true
pi = exp(eta) / (1 + exp(eta))
Y  = rbinom(N,1,pi)
## fit model;
test1 <- G3proj::SSVS.Logistic(Y0 = Y, X0 = X, propSD0 = rep(.5,p), c0 = 10,
tau0 = 0.4, nMC = 500, nBI = 50, seed=1)
load_all()
cd ..
getwd()
setwd("~/2021Spring/BIOS 735")
library(devtools)
build("G3proj")
install.packages("G3proj_0.0.0.9000.tar.gz")
getwd())
getwd()
setwd("~/2021Spring/BIOS 735/G3proj")
test_package("G3proj")
library(devtools)
test_package("G3proj")
load_all()
getwd()
load_all()
devtools::load_all()
library(G3proj)
set.seed(1);
N  = 1000;
p  = 10;
X.test    = matrix(data = rnorm(N*p), nrow=N, ncol=p)
beta_true = c(rep(1,p/2),rep(0,p/2))
eta       = X.test %*% beta_true
pi        = exp(eta) / (1 + exp(eta))
Y.test    = rbinom(N,1,pi)
## simulate MCMC beta samples (beta_true + N(0, 0.5) random errors)
M = 1000
MCsamples = matrix(data = rep(beta_true, M), nrow = M, ncol = p, byrow = T) + matrix(data = rnorm(M*p, sd = 0.5), nrow=M, ncol=p)
## predict based on MCMC beta samples
prediction = predict_BLRM(Y.test, X.test, MCsamples)
## Classification Metrics with cutoff = 0.5
caret::confusionMatrix(data = factor(prediction$data), reference = factor(ifelse(prediction$pred.prob > 0.5, 1, 0)), positive = "1")
test1 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 100, b = 10)
test2 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 200, b = 10)
test3 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000)
test4 <- BLRM_Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 100, b = 10)
test5 <- BLRM_Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 200, b = 10)
test6 <- BLRM_Tuning(Y0 = Y, X0 = X, PriorVar = 1000)
set.seed(1);
N  = 100;
p  = 10;
X  = matrix(data = rnorm(N*p), nrow=N, ncol=p)
beta_true = c(rep(1,p/2),rep(0,p/2))
eta = X %*% beta_true
pi = exp(eta) / (1 + exp(eta))
Y  = rbinom(N,1,pi)
## Compute optimal proposal SD;
test1 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 100, b = 10)
test2 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 200, b = 10)
test3 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000)
test4 <- BLRM_Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 100, b = 10)
test5 <- BLRM_Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 200, b = 10)
test6 <- BLRM_Tuning(Y0 = Y, X0 = X, PriorVar = 1000)
library(devtools)
load_all()
## Compute optimal proposal SD;
test1 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 100, b = 10)
test2 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 200, b = 10)
test3 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000)
load_all()
## Compute optimal proposal SD;
test1 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 100, b = 10)
test2 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 200, b = 10)
test3 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000)
load_all()
## Compute optimal proposal SD;
test1 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 100, b = 10)
test2 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 200, b = 10)
test3 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000)
load_all()
## Compute optimal proposal SD;
test1 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 100, b = 10)
test2 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000,
nMC = 200, b = 10)
test3 <- BLRM.Tuning(Y0 = Y, X0 = X, PriorVar = 1000)
set.seed(1);
N  = 100;
p  = 10;
X  = matrix(data = rnorm(N*p), nrow=N, ncol=p)
beta_true = c(rep(1,p/2),rep(0,p/2))
eta = X %*% beta_true
pi = exp(eta) / (1 + exp(eta))
Y  = rbinom(N,1,pi)
propSD = rep(1,p)
test1 <- G3proj::BLRM.fit.mwg(Y0 = Y, X0 = X, PriorVar = 1000, propSD0 = propSD,
nMC = 500, nBI = 100, thin = 1)
test2 <- G3proj::BLRM.fit.mwg(Y0 = Y, X0 = X, PriorVar = 1000, propSD0 = propSD)
predict_BLRM
library(devtools)
install_github("lcw68/G3proj")
library(G3proj)
remove.packages("G3proj", lib="~/R/x86_64-pc-linux-gnu-library/4.0")
library(devtools)
install_github("lcw68/G3proj")
library(devtools)
install_github("lcw68/G3proj")
getwd()
document()
remove.packages("G3proj", lib="~/R/x86_64-pc-linux-gnu-library/4.0")
document()
document()
load_all()
