xlab = expression(lambda),
type = 'l', lwd = 2, lty = 1, col = 1)
abline(v=lambda[min_BIC], col = 2)
}
glm(train[1:100,-94],train[1:100,94],family=binomial(link="logit"))$coefficients
glm.fit(train[1:100,-94],train[1:100,94],family=binomial(link="logit"))$coefficients
glm.fit(train[,-94],train[,94],family=binomial(link="logit"))$coefficients
Xz = train[1:100,-94];yz = train[1:100,94]
optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.08,len = 200) #0.0475
sf1 = glmlasso(Xz,yz,lambda = 0.0716)
sf1
sf1 = glmlasso(Xz,yz,lambda = 0.0714)
sf1
sf1 = glmlasso(Xz,yz,lambda = 0.07)
sf1
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.07,intercept = FALSE)
coef(g1,s=0.07)
coef(g1,s=0.07)[73,]
predict.glmlasso <- function(fit, newdata, type="response", threshold = 0.5)
{
pred = exp(newdata %*% fit)/(1+exp(newdata %*% fit))
if(type == "class")
{
pred  = ifelse(pred > threshold,1,0)
}
return(pred)
}
predict.glmlasso(sf1,newdata = train[101:150,-94])
sf1
sf1 = glmlasso(Xz,yz,lambda = 0.002)
predict.glmlasso(sf1,newdata = train[101:150,-94])
predict.glmlasso(sf1,newdata = train[101:150,-94],type="class")
table(predict.glmlasso(sf1,newdata = train[101:150,-94],type="class"),train[101:150,94])
caret::ConfusionMatrix(table(predict.glmlasso(sf1,newdata = train[101:150,-94],type="class"),train[101:150,94]))
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[101:150,-94],type="class"),train[101:150,94]))
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.07,intercept = FALSE)
g1$df
sum(coef(g1,s=0.07)[,1]!=0)
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.007,intercept = FALSE)
g1$df
sum(coef(g1,s=0.007)[,1]!=0)
optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.05,len = 200) #0.0475
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.0455,intercept = FALSE)
sf1 = glmlasso(Xz,yz,lambda = 0.0455)
sf1
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.0455,intercept = FALSE)
ts1 = cbind(coef(g1,lambda = 0.0455)[-1,],sf1)
ts1
table(predict.glmlasso(sf1,newdata = train[101:150,-94],type="class"),train[101:150,94])
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[101:150,-94],type="class"),train[101:150,94]))
dim(train)
Xz = train[1:5000,-94];yz = train[1:5000,94]
optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.05,len = 200) #0.0475
w = coef(glm.fit(Xz,yz,family=binomial()))
w[is.na(w)]=1
w
document()
help(glmlasso)
Xz = train[1:500,-94];yz = train[1:500,94]
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.0455,intercept = FALSE)
sf1 = glmlasso(Xz,yz,lambda = 0.0455)
cbind(coef(g1,s=0.0455),sf1)
cbind(coef(g1,s=0.0455)[-1,],sf1)
sf1 = glmlasso(Xz,yz,lambda = 0.02)
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.02,intercept = FALSE)
cbind(coef(g1,s=0.02)[-1,],sf1)
glmlasso
document()
sf1 = glmlasso(Xz,yz,lambda = 0.02)
cbind(coef(g1,s=0.02)[-1,],sf1)
sf1 = glmlasso(Xz,yz,lambda = 0.01)
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.01,intercept = FALSE)
cbind(coef(g1,s=0.01)[-1,],sf1)
predict.glmlasso(sf1,newdata = train[6000:7000,-94],type="class")
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[6000:7000,-94],type="class"),train[6000:7000,94]))
help(confusionMatrix)
predict(g1,newx = train[5000:6000,-94])
predict(g1,newx = train[5000:6000,-94],type="class")
caret::confusionMatrix(table(predict(g1,newx = train[5000:6000,-94],type="class"),train[6000:7000,94]))
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[6000:7000,-94],type="class"),train[6000:7000,94]))
optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.04,len = 80) #0.0475
g1 = glmnet(Xz,yz,family="binomial",lambda = 0.0215,intercept = FALSE)
sf1 = glmlasso(Xz,yz,lambda = 0.0215)
cbind(coef(g1,s=0.0215)[-1,],sf1)
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[6000:7000,-94],type="class"),train[6000:7000,94]))
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[6000:6500,-94],type="class"),train[6000:6500,94]))
caret::confusionMatrix(table(predict(g1,newx = train[5000:6000,-94],type="class"),train[6000:7000,94]))
Xz = train[,-94];yz = train[,94]
optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.035,len = 50) #0.0475
sf1 = glmlasso(Xz,yz,lambda = 0.0215)
sf1
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[6000:7000,-94],type="class"),train[6000:7000,94]))
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[100:500,-94],type="class"),train[100:500,94]))
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = train[,-94],type="class"),train[,94]))
sf1 = glmlasso(Xz,yz,lambda = 0.01)
g1 = glmnet(Xz,yz,lambda = 0.01,family="binomial",intercept = FALSE)
caret::confusionMatrix(table(predict(g1,type="class"),train[,94]))
caret::confusionMatrix(table(predict(g1,newx = train[,-94],type="class"),train[,94]))
load("test.Rda")
setwd("~/GitHub/BIOS735-Group3")
load("test.Rda")
head(test)
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = test[,-94],type="class"),test[,94]))
test <- apply(test,1,as.numeric)
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = test[,-94],type="class"),test[,94]))
head(test)
rm(test)
load("test.Rda")
head(test)
class*test$passangerPartner
class(test$passangerPartner)
test <- apply(test,2,as.numeric)
head(test)
caret::confusionMatrix(table(predict.glmlasso(sf1,newdata = test[,-94],type="class"),test[,94]))
caret::confusionMatrix(table(predict(g1,newx = test[,-94],type="class"),test[,94]))
library(pROC)
modr = roc(predict.glmlasso(sf1,newdata = test[,-94],type="class"),test[,94]))
modr = roc(predict.glmlasso(sf1,newdata = test[,-94],type="class"),test[,94])
plot(modr)
modr = roc(as.vector(predict.glmlasso(sf1,newdata = test[,-94],type="class")),test[,94])
plot(modr)
help(glmlasso)
plot(modr)
plot(modr,print.auc=TRUE,auc.polygon=TRUE,grid=c(0.1,0.2),grid.col=c("green","red"),max.auc.polygon=TRUE,auc.polygon.col="skyblue",#print.thres=TRUE,
main = "")
getwd()
setwd("D:/UNC/735/G3proj")
document()
rm(list = c("optim.lambda"))
document()
document()
document()
build()
load_all()
help(plot.roc)
load_all()
library(devtools)
load_all()
setwd("~/GitHub/BIOS735-Group3")
load("train.Rda")
load("test.Rda")
tr = apply(train,2,as.numeric)
te = apply(test,2,as.numeric)
Xz <- tr[,1:91]
yz <- tr[,92]
Xz.t <- te[,1:91]
yz.t <- te[,92]
fit.las = glmlasso(Xz,yz,lambda = 0.015)
setwd("D:/UNC/735")
load(".Rhistory")
setwd("D:/UNC/735/G3proj")
load(".Rhistory")
fit.las = glmlasso(Xz,yz,lambda = 0.015)
warnings()
fit.las
pred.las = predict.glmlasso(fit.las,newdata = Xz, type="response")
pred.las = predict.glmlasso(fit.las,newdata = Xz, type="class")
library(caret)
pred.las = predict.glmlasso(fit.las,newdata = Xz.t, type="class")
confusionMatrix(table(yz.t,pred.las))
library(pROC)
plot(roc(yz.t,pred.las),print.auc=TRUE,auc.polygon=TRUE,grid=c(0.1,0.2),grid.col=c("green","red"),max.auc.polygon=TRUE,auc.polygon.col="skyblue",#print.thres=TRUE,
main = "")
plot(roc(yz.t,as.numeric(pred.las)),print.auc=TRUE,auc.polygon=TRUE,grid=c(0.1,0.2),grid.col=c("green","red"),max.auc.polygon=TRUE,auc.polygon.col="skyblue",#print.thres=TRUE,
main = "")
help(roc)
plot(roc(response = yz.t,predictor = as.numeric(pred.las)),print.auc=TRUE,auc.polygon=TRUE,grid=c(0.1,0.2),grid.col=c("green","red"),max.auc.polygon=TRUE,auc.polygon.col="skyblue",#print.thres=TRUE,
main = "")
pred.y = as.vector(predict.glmlasso(fit.las,Xz.t,type="class"))
plot(roc(response = yz.t,predictor = as.numeric(pred.y)),print.auc=TRUE,auc.polygon=TRUE,grid=c(0.1,0.2),grid.col=c("green","red"),max.auc.polygon=TRUE,auc.polygon.col="skyblue",#print.thres=TRUE,
main = "")
pred.las = predict.glmlasso(fit.las,newdata = Xz.t, type="repsonse")
plot(roc(response = yz.t,predictor = as.numeric(pred.las)),print.auc=TRUE,auc.polygon=TRUE,grid=c(0.1,0.2),grid.col=c("green","red"),max.auc.polygon=TRUE,auc.polygon.col="skyblue",#print.thres=TRUE,
main = "")
pred.las
fit.las1 = glmlasso(Xz,yz,lambda =  0.007578947)
pred.las = predict.glmlasso(fit.las,newdata = Xz.t, type="class")
confusionMatrix(table(yz.t,pred.las))
help(recall)
recall(table(yz.t,pred.las))
precision(table(yz.t,pred.las))
###example
set.seed(1232)
Nz = 500
pz = 10
Xz = scale(matrix(rnorm(Nz*pz), ncol=pz))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, pz-6))
yz = rbinom(Nz,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
lambda = .1
fit1 <- glmlasso(Xz,yz,tol=1e-12)
fit1
### main function ###
glmlasso1 <- function(
X,                   # model matrix
y,                   # target
lambda  = .1,        # penalty parameter
tol     = 1e-6,      # tolerance
iter    = 100      # number of max iterations
)
{
w = rep(1,ncol(X))
i = 1
tol_curr = 1
w = t(w)
w = t(w)
while(tol < tol_curr && i < iter)
{
w_old = w
W0 = exp(X%*%w)/(1+exp(X%*%w))^2   ###W = \pi(xi)*(1-\pi(xi))
z = getzed(w,X,y,W0)
w_update <- function(j)
{
res <- get_res_logi(w,j,X,z)
wn =one_dim_logis(lambda,X[,j],y=res,W0)
return(wn)
}
w = t(t(sapply(1:length(w),w_update)))
# for(j in 1:length(w))
# {
#   res <- get_res_logi(w,j,X,z)
#   w[j,] <- one_dim_logis(lambda,X[,j],y=res,W0)
# }
i = i+1
tol_curr <- crossprod(w - w_old)
}
return(w)
}
fit1 <- glmlasso1(Xz,yz,tol=1e-12)
fit1
setwd("D:/UNC/735/G3proj")
document()
hist(pred.las)
hist(pred.y)
pred.las = predict.glmlasso(fit.las,newdata = Xz.t, type="reponse")
hist(pred.las)
glmlasso1
set.seed(1232)
Nz = 500
pz = 10
Xz = scale(matrix(rnorm(Nz*pz), ncol=pz))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, pz-6))
yz = rbinom(Nz,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
lambda = .1
glmlasso1(Xz,yz,lambda,tol=1e-12)
glmlasso(Xz,yz,lambda,tol=1e-12)
glmlasso1(Xz,yz,lambda=0.05,tol=1e-12)
glmlasso(Xz,yz,lambda=0.05,tol=1e-12)
getwd()
load_all()
help(SSVS_Logistic)
help(predict.glmlasso)
help(optim.lambda)
set.seed(8675309)
Xz = scale(matrix(rnorm(5000), ncol=10))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, 4))
yz = rbinom(Nz,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.1,len = 20)
help(SSVS_Tuning)
help(glmlasso)
set.seed(1232)
Nz = 500
pz = 10
Xz = scale(matrix(rnorm(Nz*pz), ncol=pz))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, pz-6))
yz = rbinom(Nz,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
lambda = .1
require(glmnet)
fit <- glmnet(Xz,yz,family="binomial",lambda = 0.1,intercept = FALSE)
coef(fit,s = 0.1)
fit1 <- glmlasso(Xz,yz,lambda,tol=1e-12)
ffit
fit1
expect_equal(fit1[,1],coef(fit,s = 0.1)[-1,1])
library(testthat)
expect_equal(fit1[,1],coef(fit,s = 0.1)[-1,1])
coef(fit,s = 0.1)[-1,1]
fit1[,1]
all.equal(fit1[,1],coef(fit,s = 0.1)[-1,1])
fit.glmnet = coef(fit,s = 0.1)[-1,1]
names(fit.glmnet) = NULL
all.equal(fit1[,1],fit.glmnet)
expect_equal(fit1[,1],fit.glmnet)
test_that("GLM lasso bad input",{
set.seed(1232)
Nz = 500
pz = 10
Xz = scale(matrix(rnorm(Nz*pz), ncol=pz))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, pz-6))
yz = rbinom(Nz+1,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
lambda = .1
expect_error(glmlasso(Xz,yz,lambda,tol=1e-12))
})
test_that("GLM lasso bad input",{
set.seed(1232)
Nz = 500
pz = 10
Xz = scale(matrix(rnorm(Nz*pz), ncol=pz))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, pz-6))
yz = rbinom(Nz+1,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
yz1 = rbinom(Nz,2,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
lambda = .1
expect_error(glmlasso(Xz,yz,lambda,tol=1e-12))
expect_error(glmlasso(Xz,yz1,lambda,tol=1e-12))
})
yz1 = rbinom(Nz,2,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
yz1
glmlasso(Xz,yz1,lambda,tol=1e-12)
test_that("GLM lasso fitting close to glmnet",{
set.seed(1232)
Nz = 500
pz = 10
Xz = scale(matrix(rnorm(Nz*pz), ncol=pz))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, pz-6))
yz = rbinom(Nz,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
lambda = .1
fit <- glmnet(Xz,yz,family="binomial",lambda = 0.1,intercept = FALSE)
fit.glmnet = coef(fit,s = lambda)[-1,1]
names(fit.glmnet) = NULL
fit1 <- glmlasso(Xz,yz,lambda,tol=1e-12)
expect_equal(fit1, fit.glmnet)
})
test_that("GLM lasso bad input",{
set.seed(1232)
Nz = 500
pz = 10
Xz = scale(matrix(rnorm(Nz*pz), ncol=pz))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, pz-6))
yz = rbinom(Nz+1,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
yz1 = factor(yz)
lambda = .1
expect_error(glmlasso(Xz,yz,lambda,tol=1e-12))
expect_error(glmlasso(Xz,yz1,lambda,tol=1e-12))
})
yz1=factor(yz)
levels(yz1)
head(yz1)
as.numeric(yz1)
getwd()
load_all()
document()
nrow(Xz)
length(yz)
document()
test_that("GLM lasso bad input",{
set.seed(1232)
Nz = 500
pz = 10
Xz = scale(matrix(rnorm(Nz*pz), ncol=pz))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, pz-6))
yz = rbinom(Nz+1,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
yz1 = factor(rbinom(Nz,2,exp(Xz %*% bz)/(1+exp(Xz %*% bz))))
lambda = .1
expect_error(glmlasso(Xz,yz,lambda,tol=1e-12))
expect_error(glmlasso(Xz,yz1,lambda,tol=1e-12))
})
set.seed(1232)
Nz = 500
pz = 10
Xz = scale(matrix(rnorm(Nz*pz), ncol=pz))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, pz-6))
yz = rbinom(Nz,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
lambda = .1
require(glmnet)
fit <- glmnet(Xz,yz,family="binomial",lambda = 0.1,intercept = FALSE)
coef(fit,s = 0.1)
fit1 <- glmlasso(Xz,yz,lambda,tol=1e-12)
fit1
glmlasso(Xz,rbinom(200,1,0.4))
glmlasso(Xz,as.factor(rbinom(500,2,0.4)))
help(optim.lambda)
document()
test_that("optim.lambda bad input",{
set.seed(1232)
Nz = 500
pz = 10
Xz = scale(matrix(rnorm(Nz*pz), ncol=pz))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, pz-6))
yz = rbinom(Nz,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
yz1 = factor(rbinom(Nz,2,exp(Xz %*% bz)/(1+exp(Xz %*% bz))))
expect_error(optim.lambda(Xz,yz,lambda.min = 0.1,lambda.max = 0.05,len = 200))
expect_error(optim.lambda(Xz,yz1,lambda.min = 0.01,lambda.max = 0.05,len = 200))
})
test_package("G3proj")
help("expect_equal")
help(glmlasso)
fit <- glmnet::glmnet(Xz,yz,family="binomial",lambda = 0.1,intercept = FALSE)
fit0 = coef(fit,s = lambda)[-1,1]
fit0
names(fit0) = NULL
fit1 <- glmlasso(Xz,yz,lambda,tol=1e-12)
fit1
expect_equal(fit1[,1],fit0,tolerance = 0.01)
expect_equal(fit1[,1],fit0,tolerance = 0.0001)
expect_equal(fit1[,1],fit0,tolerance = 0.001)
expect_equal(fit1[,1],fit0,tolerance = 0.01)
expect_equal(fit1[,1],fit0,tolerance = 0.005)
test_that("GLM lasso result consistent with glmnet",{
set.seed(1232)
Nz = 500
pz = 10
Xz = scale(matrix(rnorm(Nz*pz), ncol=pz))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, pz-6))
yz = rbinom(Nz,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
lambda = .1
lambda = .1
fit <- glmnet::glmnet(Xz,yz,family="binomial",lambda = 0.1,intercept = FALSE)
fit0 = coef(fit,s = lambda)[-1,1]
names(fit0) = NULL
fit1 <- glmlasso(Xz,yz,lambda,tol=1e-12)
expect_equal(fit1[,1],fit0,tolerance = 0.005)
})
document()
test_package("G3proj")
It can be installed using the following:
```{r install}
library(devtools)
install_github("lcw68/G3proj")
```
Lamb = optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.016,len = 25)
yz
optim.lambda
document()
Lamb = optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.016,len = 25)
Lamb[[1]]
load_all()
test_that("the seleted lambda close to glmnetBIC", {
library(glmnet)
set.seed(8675309)
Nz = 500
pz = 10
Xz = scale(matrix(rnorm(Nz*pz), ncol=pz))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, pz-6))
yz = rbinom(Nz,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
lambda1 <- optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.1,len = 200)[[1]]
fit <- glmnet(Xz, yz,lambda = seq(0.1,0,length=200), family = "binomial")
tLL <- fit$nulldev - deviance(fit)
k <- fit$df
n <- fit$nobs
BIC<-log(n)*k - tLL
min_BIC=which(BIC==min(BIC))
lambda_expected <- seq(0.1,0,length=200)[min_BIC]
expect_equal(lambda1,lambda_expected, tolerance = 0.05)
})
help("dotPlot")
getwd()
document()
load_all()
build()
help(G3proj)
help(glmlasso)
help(BLRM_Tuning)
help(SSVS.Logistic)
help(SSVS_Logistic)
set.seed(1);
N  = 100;
p  = 10;
X  = matrix(data = rnorm(N*p), nrow=N, ncol=p)
beta_true = c(rep(1,p/2),rep(0,p/2))
eta = X %*% beta_true
pi = exp(eta) / (1 + exp(eta))
Y  = rbinom(N,1,pi)
## fit model;
test1 <- G3proj::SSVS.Logistic(Y0 = Y, X0 = X, propSD0, c0 = 10,
tau0 = 0.4, nMC = 1000, nBI = 100, thin=1, seed=1)
help(SSVS.Tuning)
help(glmlasso)
set.seed(1232)
Nz = 500
pz = 10
Xz = scale(matrix(rnorm(Nz*pz), ncol=pz))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, pz-6))
yz = rbinom(Nz,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
lambda = .1
require(glmnet)
fit <- glmnet(Xz,yz,family="binomial",lambda = 0.1,intercept = FALSE)
coef(fit,s = 0.1)
fit1 <- glmlasso(Xz,yz,lambda,tol=1e-12)
help(optim.lambda)
set.seed(8675309)
Xz = scale(matrix(rnorm(5000), ncol=10))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, 4))
yz = rbinom(Nz,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.1,len = 200)
set.seed(8675309)
Xz = scale(matrix(rnorm(5000), ncol=10))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, 4))
yz = rbinom(Nz,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.1,len = 20)
set.seed(8675309)
Xz = scale(matrix(rnorm(5000), ncol=10))
bz = c(.5, -.5, .25, -.25, .125, -.125, rep(0, 4))
yz = rbinom(Nz,1,exp(Xz %*% bz)/(1+exp(Xz %*% bz)))
optim.lambda(Xz,yz,lambda.min = 0,lambda.max = 0.1,len = 20,plot=TRUE)
help(predict.glmlasso)
fit1 <- glmlasso(Xz,yz,lambda,tol=1e-12)
pred <- predict.glmlasso(fit1,newdata = Xz)
pred
library(G3proj)
help(predict.glmlasso)
load_all()
document()
load_all()
G3proj::predict.glmlasso(fit1,Xz)
help(soft_thresh)
setwd()
getwd()
document()
library(devtools)
document()
load_all()
document()
load_all()
